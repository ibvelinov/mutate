document.querySelector('mutation-test-report-app').report = {"files":{"/Users/iliyan/Documents/work/mutate/src/getMutationCandidates/getMutationCandidates.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":2,"line":71},"start":{"column":31,"line":1}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"1","location":{"end":{"column":2,"line":71},"start":{"column":18,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"7","location":{"end":{"column":28,"line":37},"start":{"column":10,"line":37}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"9","location":{"end":{"column":47,"line":41},"start":{"column":33,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"2","location":{"end":{"column":29,"line":16},"start":{"column":21,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"3","location":{"end":{"column":36,"line":19},"start":{"column":15,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"10","location":{"end":{"column":6,"line":59},"start":{"column":23,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"12","location":{"end":{"column":34,"line":51},"start":{"column":11,"line":51}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"15","location":{"end":{"column":34,"line":51},"start":{"column":21,"line":51}},"mutatorName":"BooleanLiteral","replacement":"value.length","status":"Killed"},{"id":"14","location":{"end":{"column":17,"line":51},"start":{"column":11,"line":51}},"mutatorName":"BooleanLiteral","replacement":"value","status":"Killed"},{"id":"16","location":{"end":{"column":8,"line":53},"start":{"column":36,"line":51}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"17","location":{"end":{"column":8,"line":58},"start":{"column":14,"line":55}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"5","location":{"end":{"column":4,"line":30},"start":{"column":40,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"19","location":{"end":{"column":34,"line":57},"start":{"column":9,"line":57}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"20","location":{"end":{"column":13,"line":60},"start":{"column":5,"line":60}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"22","location":{"end":{"column":12,"line":60},"start":{"column":10,"line":60}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"4","location":{"end":{"column":41,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ArithmeticOperator","replacement":"parseInt(MUTATE_SKIP) - 1","status":"Killed"},{"id":"23","location":{"end":{"column":4,"line":70},"start":{"column":10,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"6","location":{"end":{"column":39,"line":32},"start":{"column":17,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"8","location":{"end":{"column":63,"line":40},"start":{"column":31,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"mutationCandidates.length * size","status":"Killed"},{"id":"11","location":{"end":{"column":34,"line":51},"start":{"column":11,"line":51}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"13","location":{"end":{"column":34,"line":51},"start":{"column":11,"line":51}},"mutatorName":"LogicalOperator","replacement":"!value && !value.length","status":"Killed"},{"id":"18","location":{"end":{"column":25,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"21","location":{"end":{"column":8,"line":60},"start":{"column":6,"line":60}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"}],"source":"const getMutationCandidates = ({\n  getInitialFiles,\n  logger,\n  MATCH,\n  toMutation,\n  toPagedList,\n  STRATEGY,\n  withMatch,\n  withSearch,\n}) => payload => {\n  const {\n    MUTATE_MAX = 10000,\n    MUTATE_SKIP = 0,\n    MUTATE_SEARCH,\n    MUTATE_STRATEGY = STRATEGY.all,\n    MUTATE_BRANCH = 'master',\n  } = payload\n\n  logger.info('MUTATION OPTIONS:\\n', payload)\n\n  const size = parseInt(MUTATE_MAX)\n  const page = parseInt(MUTATE_SKIP) + 1\n  const search = MUTATE_SEARCH\n  const strategy = MUTATE_STRATEGY\n  const branch = MUTATE_BRANCH\n\n  const initialFiles = getInitialFiles({\n    branch,\n    strategy,\n  })\n\n  const match = [MATCH.js, MATCH.test]\n\n  const mutationCandidates = initialFiles\n    .filter(withMatch(match))\n    .filter(withSearch(search))\n    .map(x => toMutation(x))\n    .filter(Boolean)\n\n  const pageCount = Math.ceil(mutationCandidates.length / size)\n  const pagedList = toPagedList({ size, page })(mutationCandidates)\n\n  const [mutate, files] = pagedList.reduce(\n    (result, file) => {\n      const [mutate, files] = result\n\n      const [key] = Object.keys(file)\n\n      const value = file[key]\n\n      if (!value || !value.length) {\n        return result\n      }\n\n      return [\n        [...mutate, key],\n        [...files, key, ...value],\n      ]\n    },\n    [[], []],\n  )\n\n  return {\n    page,\n    size,\n    pageCount,\n    search,\n    mutate,\n    files,\n  }\n}\n\nmodule.exports = getMutationCandidates\n"},"/Users/iliyan/Documents/work/mutate/src/mutate/mutate.js":{"language":"javascript","mutants":[{"id":"25","location":{"end":{"column":2,"line":51},"start":{"column":7,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"24","location":{"end":{"column":2,"line":51},"start":{"column":16,"line":1}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"26","location":{"end":{"column":6,"line":17},"start":{"column":5,"line":10}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"27","location":{"end":{"column":19,"line":18},"start":{"column":5,"line":18}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"29","location":{"end":{"column":19,"line":18},"start":{"column":10,"line":18}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"28","location":{"end":{"column":19,"line":18},"start":{"column":10,"line":18}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"30","location":{"end":{"column":19,"line":18},"start":{"column":10,"line":18}},"mutatorName":"EqualityOperator","replacement":"x != null","status":"Killed"},{"id":"31","location":{"end":{"column":10,"line":21},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"32","location":{"end":{"column":10,"line":21},"start":{"column":7,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"34","location":{"end":{"column":29,"line":22},"start":{"column":18,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"33","location":{"end":{"column":4,"line":24},"start":{"column":12,"line":21}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"35","location":{"end":{"column":38,"line":26},"start":{"column":20,"line":26}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"37","location":{"end":{"column":38,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"38","location":{"end":{"column":16,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"36","location":{"end":{"column":43,"line":27},"start":{"column":10,"line":27}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"41","location":{"end":{"column":4,"line":33},"start":{"column":18,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"40","location":{"end":{"column":16,"line":30},"start":{"column":7,"line":30}},"mutatorName":"BooleanLiteral","replacement":"filePath","status":"Killed"},{"id":"39","location":{"end":{"column":16,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"42","location":{"end":{"column":53,"line":31},"start":{"column":17,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"43","location":{"end":{"column":75,"line":31},"start":{"column":55,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"44","location":{"end":{"column":36,"line":35},"start":{"column":19,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"47","location":{"end":{"column":27,"line":38},"start":{"column":19,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"48","location":{"end":{"column":43,"line":38},"start":{"column":29,"line":38}},"mutatorName":"ArithmeticOperator","replacement":"INIT_CWD - '/'","status":"Killed"},{"id":"45","location":{"end":{"column":31,"line":36},"start":{"column":19,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"49","location":{"end":{"column":43,"line":38},"start":{"column":40,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"51","location":{"end":{"column":4,"line":48},"start":{"column":48,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"46","location":{"end":{"column":30,"line":37},"start":{"column":19,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"50","location":{"end":{"column":25,"line":39},"start":{"column":19,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"52","location":{"end":{"column":19,"line":42},"start":{"column":13,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"55","location":{"end":{"column":41,"line":45},"start":{"column":23,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"54","location":{"end":{"column":21,"line":45},"start":{"column":7,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"53","location":{"end":{"column":6,"line":46},"start":{"column":14,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"},{"id":"56","location":{"end":{"column":26,"line":50},"start":{"column":15,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"}],"source":"const mutate = ({ only, fetch, fs, path, formData, logger }) => async ({\n  MUTATE_API_URL,\n  MUTATE_REPOSITORY_TOKEN,\n  MUTATE_PULL_NUMBER,\n  MUTATE_PULL_OWNER,\n  MUTATE_FILE_PATH,\n  INIT_CWD,\n}) => {\n  const nil = only(\n    {\n      MUTATE_API_URL,\n      MUTATE_REPOSITORY_TOKEN,\n      MUTATE_PULL_NUMBER,\n      MUTATE_PULL_OWNER,\n      MUTATE_FILE_PATH,\n      INIT_CWD,\n    },\n    x => x == null,\n  )\n\n  if (nil) {\n    logger.error('REQUIRED:', nil)\n    return\n  }\n\n  const filePath = [MUTATE_FILE_PATH]\n    .map(file => path.join(INIT_CWD, file))\n    .find(path => fs.existsSync(path))\n\n  if (!filePath) {\n    logger.info('NO REPORT FILE FOUND IN DIRECTORY:', { MUTATE_FILE_PATH })\n    return\n  }\n\n  formData.append('repositoryToken', MUTATE_REPOSITORY_TOKEN)\n  formData.append('pullNumber', MUTATE_PULL_NUMBER)\n  formData.append('pullOwner', MUTATE_PULL_OWNER)\n  formData.append('escape', INIT_CWD + '/')\n  formData.append('file', fs.createReadStream(filePath))\n\n  const response = await fetch(MUTATE_API_URL, {\n    method: 'POST',\n    headers: {\n      ...formData.getHeaders(),\n      'Content-Type': 'application/json',\n    },\n    body: formData,\n  })\n\n  logger.info('RESPONSE:', await response.json())\n}\n\nmodule.exports = mutate\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null}};